# -*- coding: utf-8 -*-
"""task2.ipnyb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hImmTVLolzXu2rCzcLSsy3KRhHLyZtJp
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
from einops import rearrange


class RotaryEmbedding(nn.Module):
    def __init__(self, embed_size):
        super(RotaryEmbedding, self).__init__()
        self.embed_size = embed_size // 2
        self.omega = nn.Parameter(torch.randn(embed_size // 2))

    def forward(self, x):
        N, L, C = x.shape
        device = x.device

        sinusoid_inp = torch.einsum("i,d->id", torch.arange(0, L, device=device), self.omega)
        sinusoid_inp = rearrange(sinusoid_inp, "l d -> () l d")

        pos_enc = torch.cat([torch.sin(sinusoid_inp), torch.cos(sinusoid_inp)], dim=-1)
        pos_enc = pos_enc.expand(N, -1, -1)
        return pos_enc

class GroupQueryAttention(nn.Module):
    def __init__(self, embed_size, heads, group_size):
        super(GroupQueryAttention, self).__init__()
        self.embed_size = embed_size
        self.heads = heads
        self.group_size = group_size

        self.values = nn.Linear(embed_size, embed_size, bias=False)
        self.keys = nn.Linear(embed_size, embed_size, bias=False)
        self.queries = nn.Linear(embed_size, embed_size, bias=False)

        self.fc_out = nn.Linear(heads * (embed_size // heads), embed_size)

    def forward(self, values, keys, query, mask):
        N = query.shape[0]
        value_len, key_len, query_len = values.shape[1], keys.shape[1], query.shape[1]

        values = values[:, :value_len // self.heads * self.heads, :]
        keys = keys[:, :key_len // self.heads * self.heads, :]
        query = query[:, :query_len // self.heads * self.heads, :]

        values = values.reshape(N, self.heads, value_len // self.heads, -1)
        keys = keys.reshape(N, self.heads, key_len // self.heads, -1)
        queries = query.reshape(N, self.heads, query_len // self.heads, -1)

        values = self.values(values)
        keys = self.keys(keys)
        queries = self.queries(queries)

        energy = torch.einsum("nqhd,nkhd->nhqk", [queries, keys])


        if mask is not None:
            energy = energy.masked_fill(mask == 0, float("-1e20"))


        attention = torch.nn.functional.softmax(energy / (self.embed_size ** (1 / 2)), dim=3)

        out = torch.einsum("nhql,nlhd->nqhd", [attention, values])

        out = out.reshape(N, query_len, -1)


        out = self.fc_out(out)

        return out


class SlidingWindowAttention(nn.Module):
    def __init__(self, embed_size, heads, window_size):
        super(SlidingWindowAttention, self).__init__()
        self.embed_size = embed_size
        self.heads = heads
        self.window_size = window_size
        self.head_dim = embed_size // heads

        self.values = nn.Linear(embed_size, embed_size, bias=False)
        self.keys = nn.Linear(embed_size, embed_size, bias=False)
        self.queries = nn.Linear(embed_size, embed_size, bias=False)
        self.fc_out = nn.Linear(heads * (embed_size // heads), embed_size)

    def forward(self, values, keys, query, mask):
        N = query.shape[0]
        value_len, key_len, query_len = values.shape[1], keys.shape[1], query.shape[1]

        values = values.reshape(N, value_len, self.heads, self.head_dim)
        keys = keys.reshape(N, key_len, self.heads, self.head_dim)
        queries = query.reshape(N, query_len, self.heads, self.head_dim)

        values = self.values(values)
        keys = self.keys(keys)
        queries = self.queries(queries)

        energy = torch.einsum("nqhd,nkhd->nhqk", [queries, keys])
        if mask is not None:
            energy = energy.masked_fill(mask == 0, float("-1e20"))

        attention = self.sliding_window_softmax(energy, window_size=self.window_size)

        out = torch.einsum("nhql,nlhd->nqhd", [attention, values]).reshape(N, query_len, self.heads * self.head_dim)
        out = self.fc_out(out)
        return out

    @staticmethod
    def sliding_window_softmax(energy, window_size):
        b, h, n, _ = energy.size()
        unfolded = F.unfold(energy.view(b, h, n * n), window_size, stride=1, padding=0)
        unfolded = unfolded.view(b, h, n, n, -1)
        unfolded = unfolded.transpose(-1, -2).contiguous()
        unfolded = unfolded.view(b, h, n, -1)

        attention = F.softmax(unfolded, dim=-1)
        return attention

class MultiHeadAttention(nn.Module):
    def __init__(self, embed_size, heads, attention_type='original', group_size=None, window_size=None):
        super(MultiHeadAttention, self).__init__()
        self.embed_size = embed_size
        self.heads = heads
        self.attention_type = attention_type
        self.group_size = group_size
        self.window_size = window_size

        self.values = nn.Linear(embed_size, embed_size, bias=False)
        self.keys = nn.Linear(embed_size, embed_size, bias=False)
        self.queries = nn.Linear(embed_size, embed_size, bias=False)
        self.fc_out = nn.Linear(heads * (embed_size // heads), embed_size)

        # Define head_dim
        self.head_dim = embed_size // heads

    def forward(self, values, keys, query, mask):
        N = query.shape[0]
        value_len, key_len, query_len = values.shape[1], keys.shape[1], query.shape[1]

        values = values.reshape(N, value_len, self.heads, self.head_dim)
        keys = keys.reshape(N, key_len, self.heads, self.head_dim)
        queries = query.reshape(N, query_len, self.heads, self.head_dim)

        values = self.values(values)
        keys = self.keys(keys)
        queries = self.queries(queries)

        if self.attention_type == 'group':
            attention = GroupQueryAttention(self.embed_size, self.heads, self.group_size)(values, keys, queries, mask)
        elif self.attention_type == 'sliding':
            attention = SlidingWindowAttention(self.embed_size, self.heads, self.window_size)(values, keys, queries, mask)
        else:

            energy = torch.einsum("nqhd,nkhd->nhqk", [queries, keys])
            if mask is not None:
                energy = energy.masked_fill(mask == 0, float("-1e20"))
            attention = torch.nn.functional.softmax(energy / (self.head_dim ** (1 / 2)), dim=3)

        out = torch.einsum("nhql,nlhd->nqhd", attention, values).reshape(N, query_len, self.heads * self.head_dim)

        out = self.fc_out(out)
        return out

class TransformerBlock(nn.Module):
    def __init__(self, embed_size, heads, attention_type='original', group_size=None, window_size=None):
        super(TransformerBlock, self).__init__()
        self.attention_type = attention_type
        if attention_type == 'group':
            self.attention = GroupQueryAttention(embed_size, heads, group_size)
        elif attention_type == 'sliding':
            self.attention = SlidingWindowAttention(embed_size, heads, window_size)
        else:
            self.attention = MultiHeadAttention(embed_size, heads)

        self.rotary_embedding = RotaryEmbedding(embed_size)
        self.feed_forward = nn.Sequential(
            nn.Linear(embed_size, 4 * embed_size),
            nn.ReLU(),
            nn.Linear(4 * embed_size, embed_size),
        )
        self.norm1 = nn.LayerNorm(embed_size)
        self.norm2 = nn.LayerNorm(embed_size)

    def forward(self, x, mask):
        rotary_pos_embed = self.rotary_embedding(x)
        x = x + rotary_pos_embed
        attention = self.attention(x, x, x, mask)
        x = self.norm1(attention + x)
        forward = self.feed_forward(x)
        x = self.norm2(forward + x)
        return x


class GPT2(nn.Module):
    def __init__(self, vocab_size, embed_size=1024, heads=16, num_layers=24,
                 attention_type='original', group_size=None, window_size=None):
        super(GPT2, self).__init__()
        self.embedding = nn.Embedding(vocab_size, embed_size)
        self.transformer_blocks = nn.ModuleList([
            TransformerBlock(embed_size, heads, attention_type, group_size, window_size)
            for _ in range(num_layers)
        ])
        self.fc_out = nn.Linear(embed_size, vocab_size)

    def forward(self, x, mask):
        x = self.embedding(x)
        for transformer in self.transformer_blocks:
            x = transformer(x, mask)
        x = self.fc_out(x)
        return x


vocab_size = 10000
model = GPT2(vocab_size=vocab_size, attention_type='group', group_size=8)

input_tensor = torch.randint(0, vocab_size, (1, 10))

N = input_tensor.shape[0]
query_len = input_tensor.shape[1]

mask = torch.ones(N, 1, query_len, query_len)


output = model(input_tensor, mask)
print("Output shape:", output.shape)